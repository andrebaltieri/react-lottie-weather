{"version":3,"sources":["services/season.service.ts","Components/ErrorCard.tsx","Components/SummerCard.tsx","Components/SpringCard.tsx","Components/WaitingCard.tsx","Components/FallCard.tsx","Components/WinterCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["get","month","latitude","ErrorCard","defaultOptions","loop","autoplay","animationData","style","backgroundColor","color","width","height","display","alignItems","justifyContent","options","SummerCard","SpringCard","WaitingCard","FallCard","WinterCard","App","state","error","season","window","navigator","geolocation","getCurrentPosition","position","Season","Date","getMonth","coords","setState","err","message","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a33a423.chunk.js","sourcesContent":["const get = (month: number, latitude: number) => {\n    if (latitude > 0) {\n        switch (month) {\n            case 12:\n            case 1:\n            case 2:\n                return 'winter';\n\n            case 3:\n            case 4:\n            case 5:\n                return 'spring';\n\n            case 6:\n            case 7:\n            case 8:\n                return 'summer';\n\n            case 9:\n            case 10:\n            case 11:\n                return 'fall';\n        }\n    } else {\n        switch (month) {\n            case 12:\n            case 1:\n            case 2:\n                return 'summer';\n\n            case 3:\n            case 4:\n            case 5:\n                return 'fall';\n\n            case 6:\n            case 7:\n            case 8:\n                return 'winter';\n\n            case 9:\n            case 10:\n            case 11:\n                return 'spring';\n        }\n    }\n}\n\nexport default get;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/error.json';\n\nconst ErrorCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#A24936',\n        color: 'white',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Ops, something went wrong</h1>\n                <p>It was not possible to load your location</p>\n            </div>\n        </div>\n    );\n}\n\nexport default ErrorCard;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/summer.json';\n\nconst SummerCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#DD7373',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Summer</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default SummerCard;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/spring.json';\n\nconst SpringCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#E18AD4',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Spring</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default SpringCard;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/loading.json';\n\nconst WaitingCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#A5D8FF',\n        color: 'white',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Loading...</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default WaitingCard;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/fall.json';\n\nconst FallCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#EAD94C',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Fall</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default FallCard;","import React from 'react';\nimport Lottie from 'react-lottie';\nimport animationData from '../assets/winter.json';\n\nconst WinterCard: React.FC = () => {\n    const style = {\n        backgroundColor: '#D1D1D1',\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div style={style}>\n            <div>\n                <Lottie options={defaultOptions}\n                    height={400}\n                    width={400} />\n                <h1>Winter</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default WinterCard;","import React from 'react';\nimport Season from './services/season.service';\nimport ErrorCard from './Components/ErrorCard';\nimport SummerCard from './Components/SummerCard';\nimport SpringCard from './Components/SpringCard';\nimport WaitingCard from './Components/WaitingCard';\nimport FallCard from './Components/FallCard';\nimport WinterCard from './Components/WinterCard';\n\nclass App extends React.Component {\n  state = { latitude: null, error: null, season: null };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        const season = Season(new Date().getMonth(), position.coords.latitude);\n        this.setState({ latitude: position.coords.latitude, season: season });\n      },\n      err => this.setState({ error: err.message }),\n    );\n  }\n\n  render() {\n    if (this.state.season === 'summer') return <SummerCard></SummerCard>;\n    if (this.state.season === 'spring') return <SpringCard></SpringCard>;\n    if (this.state.season === 'fall') return <FallCard></FallCard>;\n    if (this.state.season === 'winter') return <WinterCard></WinterCard>\n    if (this.state.error) return <ErrorCard></ErrorCard>;\n\n    return <WaitingCard></WaitingCard>;\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}